A data-intensive application 
Commonly needed functionality 
Database: Store data so that they, or another application, can find it again later
Cache: Remember the result of an expensive operation, to speed up reads
Search indexes: Allow users to search data by keyword or filter it in various ways
Stream processing: Send a message to another process, to be handled asynchronously 
Batch processing: Periodically crunch a large amount of accumulated data

Redis: datastores  that are also used as message queues
Apache Kafka: message queues with database-like durability guarantees

Reliability: 
The system should continue to work correctly (performing the correct function at the desired level of performance) even in the face of adversity (hardware or software faults, and even human error)

Scalability:
As the system grows (in data volume, traffic volume, or complexity), there should be reasonable ways of dealing with that growth. 

Maintainability:
Over time, many different people will work on the system (engineering and operations, both maintaining current behavior and adapting the system to new use cases), and they should all be able to work on it productively.

A fault is usually defined as one component of the system deviating from its spec, whereas a failure is when the system as a whole stops providing the required service to the user.

It I s impossible to reduce the probability of a fault to zero, therefore it is usually best to design fault-tolerate mechanisms that prevent faults from causing failures.

Counterintuitively, in such fault-tolerant systems, it can make sense to increase the rate of faults by triggering them deliberately - for example, for randomly killing individual processes without warning. Many critical bugs are actually due to poor error handling; by deliberately induing facts, you ensure that the fault-tolerance machinery is continually exercised and tested, which can increase your confidence that faults will be handled correctly when they occur naturally. The Netflix Chaos Money is an example of this approach.

hardware faults: random and independent from each other
Add redundancy to the individual components in order to reduce the failure rate of the system. 
in some cloud platforms such as AWS it is fairly common for virtual machine instances to become unavailable without warning, as the platforms are designed to prioritize flexibility and elasticity over single-machine reliability. There is a move toward systems that can tolerate the loss of entire machines, by using software fault-tolerance techniques in preference. Such systems also have operational advantages: a single-server system requires planned downtime if you need to reboot the machine, whereas a system that can tolerate failure can be patched one node at a time, without downtime of the entire system.

Software errors: systematic error within the system, correlated across nodes
Software is making some kind of assumption about its environment and while that assumption is usually true, it eventually stops being true for some reason.
No quick solution to the problem of systematic faults in software. 
Carefully thinking about assumptions and interactions in the system
Thorough testing
Process isolation
Allowing processes to crash and restart
measuring, monitoring, and analyzing system behavior in production

Human errors:
Design systems in a way that minimizes opportunities for error. For example, well-designed abstractions, APIs, and admin interfaces make it easy to do “the right thing” and discourage “the wrong thing.” However, if the interfaces are too restrictive people will work around them, negating their benefit, so this is a balance to get right.
Decouple the places where people make the most mistakes from the places where they can cause failures. In particular, provide fully featured non-production sandbox environments where people can explore and experiment safely, using real data, without affecting real users.
Test thoroughly at all levels, from unit tests to whole-system integration tests and manual tests. Automated testing is widely used, well understood, and especially valuable for covering corner cases that rarely arise in normal operation.
Allow quick and easy recovery from human errors, to minimize the impact in the case of a failure. For example, make it fast to roll back configuration changes, roll out new code gradually, and provide tools to recompute data.
Set up detailed and clear monitoring, such as performance metrics and error rates. Monitoring can show us early warning signals and allow us to check whether any assumptions or constraints are being violated. When a problem occurs, metrics can be invaluable in diagnosing the issue.

Scalability:
Scalability is the term we use to describe a system’s ability to cope with increased load.

Describing load:
Load parameters: the best choices of parameters depends on the architecture of your system: 1. requests per second to a web server
2. the ratio of reads to writes in a database
3. The number of simultaneously active users in a chat room
4. The hit rate on a cache
Perhaps the average case is what matters for you, or perhaps your bottleneck is dominated by a small number of extreme cases
